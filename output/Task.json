{"paths": {"/Task/{id}": {"parameters": [{"in": "path", "required": true, "name": "id", "schema": {"type": "string"}}], "get": {"tags": ["Task"], "parameters": [], "responses": {"200": {"description": "Success", "content": {"application/fhir+json": {"schema": {"$ref": "#/components/schemas/Task"}}}}, "400": {"description": "Invalid"}, "404": {"description": "Not-Found"}, "406": {"description": "Not-Supported"}, "503": {"description": "Operation"}, "401": {"description": "Unauthorized"}, "403": {"description": "Forbidden"}, "415": {"description": "Unsupported-Type"}, "500": {"description": "Internal-Error"}, "502": {"description": "Bad-Gateway"}}, "security": [{"ApiKeyAuth": ["user/*.write", "user/*.*"]}]}, "put": {"tags": ["Task"], "responses": {"200": {"description": "Success", "content": {}}, "400": {"description": "Invalid"}, "404": {"description": "Not-Found"}, "406": {"description": "Not-Supported"}, "503": {"description": "Operation"}, "401": {"description": "Unauthorized"}, "403": {"description": "Forbidden"}, "415": {"description": "Unsupported-Type"}, "500": {"description": "Internal-Error"}, "502": {"description": "Bad-Gateway"}}, "requestBody": {"content": {"application/fhir+json": {"schema": {"$ref": "#/components/schemas/Task"}}}}, "security": [{"ApiKeyAuth": ["user/*.write", "user/*.*"]}]}, "delete": {"tags": ["Task"], "parameters": [], "responses": {"200": {"description": "Success", "content": {}}, "400": {"description": "Invalid"}, "404": {"description": "Not-Found"}, "406": {"description": "Not-Supported"}, "503": {"description": "Operation"}, "401": {"description": "Unauthorized"}, "403": {"description": "Forbidden"}, "415": {"description": "Unsupported-Type"}, "500": {"description": "Internal-Error"}, "502": {"description": "Bad-Gateway"}}, "security": [{"ApiKeyAuth": ["user/*.write", "user/*.*"]}]}}, "/Task/{id}/_history": {"get": {"tags": ["Task"], "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "_count", "in": "query", "schema": {"type": "string"}}, {"name": "_since", "in": "query", "schema": {"type": "string"}}], "responses": {"200": {"description": "Success", "content": {"application/fhir+json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Task"}}}}}, "400": {"description": "Invalid"}, "404": {"description": "Not-Found"}, "406": {"description": "Not-Supported"}, "503": {"description": "Operation"}, "401": {"description": "Unauthorized"}, "403": {"description": "Forbidden"}, "415": {"description": "Unsupported-Type"}, "500": {"description": "Internal-Error"}, "502": {"description": "Bad-Gateway"}}, "security": [{"ApiKeyAuth": ["user/*.write", "user/*.*"]}]}}, "/Task": {"post": {"tags": ["Task"], "responses": {"200": {"description": "Success", "content": {}}, "400": {"description": "Invalid"}, "404": {"description": "Not-Found"}, "406": {"description": "Not-Supported"}, "503": {"description": "Operation"}, "401": {"description": "Unauthorized"}, "403": {"description": "Forbidden"}, "415": {"description": "Unsupported-Type"}, "500": {"description": "Internal-Error"}, "502": {"description": "Bad-Gateway"}}, "requestBody": {"content": {"application/fhir+json": {"schema": {"$ref": "#/components/schemas/Task"}, "examples": {"task-example-fm-cancel.json": {"value": {"resourceType": "Task", "id": "fm-example1", "text": {"status": "generated", "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n\t\t\t<p>\n\t\t\t\t<b> Generated Narrative with Details</b>\n\t\t\t</p>\n\t\t</div>"}, "identifier": [{"use": "official", "system": "http:/happyvalley.com/task", "value": "20181012-001"}], "status": "requested", "intent": "order", "priority": "stat", "code": {"coding": [{"system": "http://terminology.hl7.org/CodeSystem/financialtaskcode", "code": "cancel"}]}, "focus": {"identifier": {"system": "http://happyvalley.com/claim", "value": "1500"}}, "authoredOn": "2018-10-04T08:25:05+10:00", "lastModified": "2018-10-04T08:25:05+10:00", "requester": {"reference": "Organization/example", "display": "Happy Valley Clinic"}, "owner": {"identifier": {"system": "http://nationalinsurers.com/identifiers", "value": "12345"}}, "meta": {"tag": [{"system": "http://terminology.hl7.org/CodeSystem/v3-ActReason", "code": "HTEST", "display": "test health data"}]}}}, "task-example-fm-poll.json": {"value": {"resourceType": "Task", "id": "fm-example2", "text": {"status": "generated", "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n\t\t\t<p>\n\t\t\t\t<b> Generated Narrative with Details</b>\n\t\t\t</p>\n\t\t</div>"}, "identifier": [{"use": "official", "system": "http:/happyvalley.com/task", "value": "20181012-005"}], "status": "requested", "intent": "order", "priority": "stat", "code": {"coding": [{"system": "http://terminology.hl7.org/CodeSystem/financialtaskcode", "code": "poll"}]}, "authoredOn": "2018-10-12T08:25:05+10:00", "lastModified": "2018-10-12T08:25:05+10:00", "requester": {"reference": "Organization/example", "display": "Happy Valley Clinic"}, "owner": {"identifier": {"system": "http://nationalinsurers.com/identifiers", "value": "12345"}}, "input": [{"type": {"coding": [{"system": "http://terminology.hl7.org/CodeSystem/financialtaskinputtype", "code": "include"}]}, "valueCode": "ClaimResponse"}, {"type": {"coding": [{"system": "http://terminology.hl7.org/CodeSystem/financialtaskinputtype", "code": "period"}]}, "valuePeriod": {"start": "2018-10-01", "end": "2018-10-12"}}], "meta": {"tag": [{"system": "http://terminology.hl7.org/CodeSystem/v3-ActReason", "code": "HTEST", "display": "test health data"}]}}}, "task-example-fm-release.json": {"value": {"resourceType": "Task", "id": "fm-example3", "text": {"status": "generated", "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n\t\t\t<p>\n\t\t\t\t<b> Generated Narrative with Details</b>\n\t\t\t</p>\n\t\t</div>"}, "identifier": [{"use": "official", "system": "http:/happyvalley.com/task", "value": "20181012-001"}], "status": "requested", "intent": "order", "priority": "stat", "code": {"coding": [{"system": "http://terminology.hl7.org/CodeSystem/financialtaskcode", "code": "release"}]}, "focus": {"identifier": {"system": "http://happyvalley.com/claim", "value": "1501"}}, "authoredOn": "2018-10-04T08:25:05+10:00", "lastModified": "2018-10-04T08:25:05+10:00", "requester": {"reference": "Organization/example", "display": "Happy Valley Clinic"}, "owner": {"identifier": {"system": "http://nationalinsurers.com/identifiers", "value": "12345"}}, "input": [{"type": {"coding": [{"system": "http://hl7.org/financial-taskinputtype", "code": "origresponse"}]}, "valueReference": {"identifier": {"system": "http://nationalinsurers.com/claimresponse", "value": "CR201810040001234"}}}], "meta": {"tag": [{"system": "http://terminology.hl7.org/CodeSystem/v3-ActReason", "code": "HTEST", "display": "test health data"}]}}}, "task-example-fm-reprocess.json": {"value": {"resourceType": "Task", "id": "fm-example4", "text": {"status": "generated", "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n\t\t\t<p>\n\t\t\t\t<b> Generated Narrative with Details</b>\n\t\t\t</p>\n\t\t</div>"}, "identifier": [{"use": "official", "system": "http:/happyvalley.com/task", "value": "20181012-006"}], "status": "requested", "intent": "order", "priority": "stat", "code": {"coding": [{"system": "http://terminology.hl7.org/CodeSystem/financialtaskcode", "code": "reprocess"}]}, "focus": {"identifier": {"system": "http://happyvalley.com/claim", "value": "1501"}}, "authoredOn": "2018-10-04T08:25:05+10:00", "lastModified": "2018-10-04T08:25:05+10:00", "requester": {"reference": "Organization/example", "display": "Happy Valley Clinic"}, "owner": {"identifier": {"system": "http://nationalinsurers.com/identifiers", "value": "12345"}}, "input": [{"type": {"coding": [{"system": "http://terminology.hl7.org/CodeSystem/financialtaskinputtype", "code": "origresponse"}]}, "valueReference": {"identifier": {"system": "http://nationalinsurers.com/claimresponse", "value": "CR201810040001234"}}}, {"type": {"coding": [{"system": "http://terminology.hl7.org/CodeSystem/financialtaskinputtype", "code": "reference"}]}, "valueString": "BR12345"}, {"type": {"coding": [{"system": "http://terminology.hl7.org/CodeSystem/financialtaskinputtype", "code": "item"}]}, "valuePositiveInt": 2}, {"type": {"coding": [{"system": "http://terminology.hl7.org/CodeSystem/financialtaskinputtype", "code": "item"}]}, "valuePositiveInt": 3}], "meta": {"tag": [{"system": "http://terminology.hl7.org/CodeSystem/v3-ActReason", "code": "HTEST", "display": "test health data"}]}}}, "task-example-fm-status-resp.json": {"value": {"resourceType": "Task", "id": "fm-example6", "text": {"status": "generated", "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n\t\t\t<p>\n\t\t\t\t<b> Generated Narrative with Details</b>\n\t\t\t</p>\n\t\t</div>"}, "identifier": [{"use": "official", "system": "http:/happyvalley.com/task", "value": "20181012-001"}, {"use": "official", "system": "http://nationalinsurers.com/identifiers/12345", "value": "123GB5674"}], "status": "completed", "intent": "order", "priority": "stat", "code": {"coding": [{"system": "http://terminology.hl7.org/CodeSystem/financialtaskcode", "code": "status"}]}, "focus": {"identifier": {"system": "http://happyvalley.com/claim", "value": "1500"}}, "authoredOn": "2018-10-04T08:25:05+10:00", "lastModified": "2018-10-04T08:25:05+10:00", "requester": {"reference": "Organization/example", "display": "Happy Valley Clinic"}, "owner": {"identifier": {"system": "http://nationalinsurers.com/identifiers", "value": "12345"}}, "output": [{"type": {"coding": [{"system": "http://hl7.org/financial-taskoutputtype", "code": "status"}]}, "valueCode": "complete"}], "meta": {"tag": [{"system": "http://terminology.hl7.org/CodeSystem/v3-ActReason", "code": "HTEST", "display": "test health data"}]}}}, "task-example-fm-status.json": {"value": {"resourceType": "Task", "id": "fm-example5", "text": {"status": "generated", "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n\t\t\t<p>\n\t\t\t\t<b> Generated Narrative with Details</b>\n\t\t\t</p>\n\t\t</div>"}, "identifier": [{"use": "official", "system": "http:/happyvalley.com/task", "value": "20181012-001"}], "status": "requested", "intent": "order", "priority": "stat", "code": {"coding": [{"system": "http://terminology.hl7.org/CodeSystem/financialtaskcode", "code": "status"}]}, "focus": {"identifier": {"system": "http://happyvalley.com/claim", "value": "1500"}}, "authoredOn": "2018-10-04T08:25:05+10:00", "lastModified": "2018-10-04T08:25:05+10:00", "requester": {"reference": "Organization/example", "display": "Happy Valley Clinic"}, "owner": {"identifier": {"system": "http://nationalinsurers.com/identifiers", "value": "12345"}}, "meta": {"tag": [{"system": "http://terminology.hl7.org/CodeSystem/v3-ActReason", "code": "HTEST", "display": "test health data"}]}}}, "task-example1.json": {"value": {"resourceType": "Task", "id": "example1", "text": {"status": "generated", "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><p><b>Generated Narrative with Details</b></p><p><b>id</b>: example1</p><p><b>contained</b>: </p><p><b>identifier</b>: 20170201-001 (OFFICIAL)</p><p><b>basedOn</b>: General Wellness Careplan</p><p><b>groupIdentifier</b>: G20170201-001 (OFFICIAL)</p><p><b>status</b>: in-progress</p><p><b>businessStatus</b>: waiting for specimen <span>(Details )</span></p><p><b>intent</b>: order</p><p><b>priority</b>: routine</p><p><b>code</b>: Lipid Panel <span>(Details )</span></p><p><b>description</b>: Create order for getting specimen, Set up inhouse testing,  generate order for any sendouts and submit with specimen</p><p><b>focus</b>: <a>Lipid Panel Request</a></p><p><b>for</b>: <a>Peter James Chalmers</a></p><p><b>encounter</b>: <a>Example In-Patient Encounter</a></p><p><b>executionPeriod</b>: 31/10/2016 8:25:05 AM --&gt; (ongoing)</p><p><b>authoredOn</b>: 31/10/2016 8:25:05 AM</p><p><b>lastModified</b>: 31/10/2016 9:45:05 AM</p><p><b>requester</b>: <a>Dr Adam Careful</a></p><p><b>performerType</b>: Performer <span>(Details : {http://terminology.hl7.org/CodeSystem/task-performer-type code 'performer' = 'performer', given as 'Performer'})</span></p><p><b>owner</b>: <a>Clinical Laboratory @ Acme Hospital</a></p><p><b>reasonCode</b>: The Task.reason should only be included if there is no Task.focus or if it differs from the reason indicated on the focus <span>(Details )</span></p><p><b>note</b>: This is an example to demonstrate using task for actioning a servicerequest and to illustrate how to populate many of the task elements - this is the parent task that will be broken into subtask to grab the specimen and a sendout lab test </p><p><b>relevantHistory</b>: Author's Signature. Generated Summary: id: signature; recorded: 31/10/2016 8:25:05 AM; </p><h3>Restrictions</h3><table><tr><td>-</td><td><b>Repetitions</b></td><td><b>Period</b></td></tr><tr><td>*</td><td>1</td><td>?? --&gt; 02/11/2016 9:45:05 AM</td></tr></table></div>"}, "contained": [{"resourceType": "Provenance", "id": "signature", "target": [{"reference": "ServiceRequest/physiotherapy/_history/1"}], "recorded": "2016-10-31T08:25:05+10:00", "agent": [{"role": [{"coding": [{"system": "http://terminology.hl7.org/CodeSystem/v3-ParticipationType", "code": "AUT"}]}], "who": {"reference": "Practitioner/f202", "display": "Luigi Maas"}}], "signature": [{"type": [{"system": "urn:iso-astm:E1762-95:2013", "code": "1.2.840.10065.1.12.1.1", "display": "Author's Signature"}], "when": "2016-10-31T08:25:05+10:00", "who": {"reference": "Practitioner/example", "display": "Dr Adam Careful"}, "targetFormat": "application/fhir+xml", "sigFormat": "application/signature+xml", "data": "dGhpcyBibG9iIGlzIHNuaXBwZWQ="}]}], "identifier": [{"use": "official", "system": "http:/goodhealth.org/identifiers", "value": "20170201-001"}], "basedOn": [{"display": "General Wellness Careplan"}], "groupIdentifier": {"use": "official", "system": "http:/goodhealth.org/accession/identifiers", "value": "G20170201-001"}, "status": "in-progress", "businessStatus": {"text": "waiting for specimen"}, "intent": "order", "priority": "routine", "code": {"text": "Lipid Panel"}, "description": "Create order for getting specimen, Set up inhouse testing,  generate order for any sendouts and submit with specimen", "focus": {"reference": "ServiceRequest/lipid", "display": "Lipid Panel Request"}, "for": {"reference": "Patient/example", "display": "Peter James Chalmers"}, "encounter": {"reference": "Encounter/example", "display": "Example In-Patient Encounter"}, "executionPeriod": {"start": "2016-10-31T08:25:05+10:00"}, "authoredOn": "2016-10-31T08:25:05+10:00", "lastModified": "2016-10-31T09:45:05+10:00", "requester": {"reference": "Practitioner/example", "display": "Dr Adam Careful"}, "performerType": [{"coding": [{"system": "http://terminology.hl7.org/CodeSystem/task-performer-type", "code": "performer", "display": "Performer"}], "text": "Performer"}], "owner": {"reference": "Organization/1832473e-2fe0-452d-abe9-3cdb9879522f", "display": "Clinical Laboratory @ Acme Hospital"}, "reasonCode": {"text": "The Task.reason should only be included if there is no Task.focus or if it differs from the reason indicated on the focus"}, "note": [{"text": "This is an example to demonstrate using task for actioning a servicerequest and to illustrate how to populate many of the task elements - this is the parent task that will be broken into subtask to grab the specimen and a sendout lab test "}], "relevantHistory": [{"reference": "#signature", "display": "Author's Signature"}], "restriction": {"repetitions": 1, "period": {"end": "2016-11-02T09:45:05+10:00"}}, "meta": {"tag": [{"system": "http://terminology.hl7.org/CodeSystem/v3-ActReason", "code": "HTEST", "display": "test health data"}]}}}, "task-example2.json": {"value": {"resourceType": "Task", "id": "example2", "text": {"status": "generated", "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><p><b>Generated Narrative with Details</b></p><p><b>id</b>: example2</p><p><b>identifier</b>: 20170201-002 (OFFICIAL)</p><p><b>groupIdentifier</b>: G20170201-001 (OFFICIAL)</p><p><b>partOf</b>: <a>Lipid Panel</a></p><p><b>status</b>: accepted</p><p><b>businessStatus</b>: waiting for patient <span>(Details )</span></p><p><b>intent</b>: filler-order</p><p><b>priority</b>: routine</p><p><b>code</b>: Specimen Collection <span>(Details )</span></p><p><b>focus</b>: BloodDraw ServiceRequest</p><p><b>for</b>: <a>Peter James Chalmers</a></p><p><b>encounter</b>: <a>Example In-Patient Encounter</a></p><p><b>executionPeriod</b>: 31/10/2016 8:45:05 AM --&gt; (ongoing)</p><p><b>authoredOn</b>: 31/10/2016 8:45:05 AM</p><p><b>lastModified</b>: 31/10/2016 9:45:05 AM</p><p><b>requester</b>: <a>Clinical Laboratory @ Acme Hospital</a></p><p><b>performerType</b>: Performer <span>(Details : {http://terminology.hl7.org/CodeSystem/task-performer-type code 'performer' = 'performer', given as 'Performer'})</span></p><p><b>owner</b>: <a>Clinical Laboratory @ Acme Hospital</a></p><h3>Restrictions</h3><table><tr><td>-</td><td><b>Repetitions</b></td><td><b>Period</b></td></tr><tr><td>*</td><td>1</td><td>?? --&gt; 01/11/2016 9:45:05 AM</td></tr></table></div>"}, "identifier": [{"use": "official", "system": "http:/goodhealth.org/identifiers", "value": "20170201-002"}], "groupIdentifier": {"use": "official", "system": "http:/goodhealth.org/accession/identifiers", "value": "G20170201-001"}, "partOf": [{"reference": "Task/example1", "display": "Lipid Panel"}], "status": "accepted", "businessStatus": {"text": "waiting for patient"}, "intent": "filler-order", "priority": "routine", "code": {"text": "Specimen Collection"}, "focus": {"display": "BloodDraw ServiceRequest"}, "for": {"reference": "Patient/example", "display": "Peter James Chalmers"}, "encounter": {"reference": "Encounter/example", "display": "Example In-Patient Encounter"}, "executionPeriod": {"start": "2016-10-31T08:45:05+10:00"}, "authoredOn": "2016-10-31T08:45:05+10:00", "lastModified": "2016-10-31T09:45:05+10:00", "requester": {"reference": "Organization/1832473e-2fe0-452d-abe9-3cdb9879522f", "display": "Clinical Laboratory @ Acme Hospital"}, "performerType": [{"coding": [{"system": "http://terminology.hl7.org/CodeSystem/task-performer-type", "code": "performer", "display": "Performer"}], "text": "Performer"}], "owner": {"reference": "Organization/1832473e-2fe0-452d-abe9-3cdb9879522f", "display": "Clinical Laboratory @ Acme Hospital"}, "restriction": {"repetitions": 1, "period": {"end": "2016-11-01T09:45:05+10:00"}}, "meta": {"tag": [{"system": "http://terminology.hl7.org/CodeSystem/v3-ActReason", "code": "HTEST", "display": "test health data"}]}}}, "task-example3.json": {"value": {"resourceType": "Task", "id": "example3", "text": {"status": "generated", "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><p><b>Generated Narrative with Details</b></p><p><b>id</b>: example3</p><p><b>status</b>: draft</p><p><b>intent</b>: order</p><p><b>code</b>: Refill Request <span>(Details )</span></p><p><b>focus</b>: <a>MedicationRequest/medrx002</a></p><p><b>for</b>: <a>Patient/f001</a></p><p><b>authoredOn</b>: 10/03/2016 10:39:32 PM</p><p><b>lastModified</b>: 10/03/2016 10:39:32 PM</p><p><b>requester</b>: <a>Patient/example</a></p><p><b>owner</b>: <a>Practitioner/example</a></p></div>"}, "status": "draft", "intent": "order", "code": {"text": "Refill Request"}, "focus": {"reference": "MedicationRequest/medrx002"}, "for": {"reference": "Patient/f001"}, "authoredOn": "2016-03-10T22:39:32-04:00", "lastModified": "2016-03-10T22:39:32-04:00", "requester": {"reference": "Patient/example"}, "owner": {"reference": "Practitioner/example"}, "meta": {"tag": [{"system": "http://terminology.hl7.org/CodeSystem/v3-ActReason", "code": "HTEST", "display": "test health data"}]}}}, "task-example4.json": {"value": {"resourceType": "Task", "id": "example4", "text": {"status": "generated", "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><p><b>Generated Narrative with Details</b></p><p><b>id</b>: example4</p><p><b>identifier</b>: 20170201-002 (OFFICIAL)</p><p><b>groupIdentifier</b>: G20170201-001 (OFFICIAL)</p><p><b>partOf</b>: <a>Lipid Panel</a></p><p><b>status</b>: completed</p><p><b>intent</b>: filler-order</p><p><b>priority</b>: routine</p><p><b>code</b>: Specimen Collection <span>(Details )</span></p><p><b>focus</b>: BloodDraw ServiceRequest</p><p><b>for</b>: <a>Peter James Chalmers</a></p><p><b>encounter</b>: <a>Example In-Patient Encounter</a></p><p><b>executionPeriod</b>: 31/10/2016 8:45:05 AM --&gt; 31/10/2016 2:45:05 PM</p><p><b>authoredOn</b>: 31/10/2016 8:45:05 AM</p><p><b>lastModified</b>: 31/10/2016 9:45:05 AM</p><p><b>requester</b>: <a>Clinical Laboratory @ Acme Hospital</a></p><p><b>performerType</b>: Performer <span>(Details : {http://terminology.hl7.org/CodeSystem/task-performer-type code 'performer' = 'performer', given as 'Performer'})</span></p><p><b>owner</b>: <a>Luigi Maas</a></p><h3>Restrictions</h3><table><tr><td>-</td><td><b>Repetitions</b></td><td><b>Period</b></td></tr><tr><td>*</td><td>1</td><td>?? --&gt; 01/11/2016 9:45:05 AM</td></tr></table><h3>Outputs</h3><table><tr><td>-</td><td><b>Type</b></td><td><b>Value[x]</b></td></tr><tr><td>*</td><td>collected specimen <span>(Details )</span></td><td><a>Specimen/101</a></td></tr></table></div>"}, "identifier": [{"use": "official", "system": "http:/goodhealth.org/identifiers", "value": "20170201-002"}], "groupIdentifier": {"use": "official", "system": "http:/goodhealth.org/accession/identifiers", "value": "G20170201-001"}, "partOf": [{"reference": "Task/example1", "display": "Lipid Panel"}], "status": "completed", "intent": "filler-order", "priority": "routine", "code": {"text": "Specimen Collection"}, "focus": {"display": "BloodDraw ServiceRequest"}, "for": {"reference": "Patient/example", "display": "Peter James Chalmers"}, "encounter": {"reference": "Encounter/example", "display": "Example In-Patient Encounter"}, "executionPeriod": {"start": "2016-10-31T08:45:05+10:00", "end": "2016-10-31T14:45:05+10:00"}, "authoredOn": "2016-10-31T08:45:05+10:00", "lastModified": "2016-10-31T09:45:05+10:00", "requester": {"reference": "Organization/1832473e-2fe0-452d-abe9-3cdb9879522f", "display": "Clinical Laboratory @ Acme Hospital"}, "performerType": [{"coding": [{"system": "http://terminology.hl7.org/CodeSystem/task-performer-type", "code": "performer", "display": "Performer"}], "text": "Performer"}], "owner": {"reference": "Practitioner/f202", "display": "Luigi Maas"}, "restriction": {"repetitions": 1, "period": {"end": "2016-11-01T09:45:05+10:00"}}, "output": [{"type": {"text": "collected specimen"}, "valueReference": {"reference": "Specimen/101"}}], "meta": {"tag": [{"system": "http://terminology.hl7.org/CodeSystem/v3-ActReason", "code": "HTEST", "display": "test health data"}]}}}, "task-example5.json": {"value": {"resourceType": "Task", "id": "example5", "text": {"status": "generated", "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><p><b>Generated Narrative with Details</b></p><p><b>id</b>: example5</p><p><b>identifier</b>: 20170201-001 (OFFICIAL)</p><p><b>basedOn</b>: General Wellness Careplan</p><p><b>groupIdentifier</b>: G20170201-001 (OFFICIAL)</p><p><b>status</b>: in-progress</p><p><b>businessStatus</b>: specimen received, test in progress <span>(Details )</span></p><p><b>intent</b>: order</p><p><b>priority</b>: routine</p><p><b>code</b>: Lipid Panel <span>(Details )</span></p><p><b>description</b>: Create order for getting specimen, Set up inhouse testing,  generate order for any sendouts and submit with specimen</p><p><b>focus</b>: <a>Lipid Panel Request</a></p><p><b>for</b>: <a>Peter James Chalmers</a></p><p><b>encounter</b>: <a>Example In-Patient Encounter</a></p><p><b>executionPeriod</b>: 31/10/2016 8:25:05 AM --&gt; (ongoing)</p><p><b>authoredOn</b>: 31/10/2016 8:25:05 AM</p><p><b>lastModified</b>: 31/10/2016 4:45:05 PM</p><p><b>requester</b>: <a>Dr Adam Careful</a></p><p><b>performerType</b>: Performer <span>(Details : {http://terminology.hl7.org/CodeSystem/task-performer-type code 'performer' = 'performer', given as 'Performer'})</span></p><p><b>owner</b>: <a>Clinical Laboratory @ Acme Hospital</a></p><p><b>reasonCode</b>: The Task.reason should only be included if there is no Task.focus or if it differs from the reason indicated on the focus <span>(Details )</span></p><p><b>note</b>: This is an example to demonstrate using task for actioning a servicerequest and to illustrate how to populate many of the task elements - this is the parent task that will be broken into subtask to grab the specimen and a sendout lab test </p><h3>Restrictions</h3><table><tr><td>-</td><td><b>Repetitions</b></td><td><b>Period</b></td></tr><tr><td>*</td><td>1</td><td>?? --&gt; 02/11/2016 9:45:05 AM</td></tr></table><h3>Outputs</h3><table><tr><td>-</td><td><b>Type</b></td><td><b>Value[x]</b></td></tr><tr><td>*</td><td>collected specimen <span>(Details )</span></td><td><a>Specimen/101</a></td></tr></table></div>"}, "identifier": [{"use": "official", "system": "http:/goodhealth.org/identifiers", "value": "20170201-001"}], "basedOn": [{"display": "General Wellness Careplan"}], "groupIdentifier": {"use": "official", "system": "http:/goodhealth.org/accession/identifiers", "value": "G20170201-001"}, "status": "in-progress", "businessStatus": {"text": "specimen received, test in progress"}, "intent": "order", "priority": "routine", "code": {"text": "Lipid Panel"}, "description": "Create order for getting specimen, Set up inhouse testing,  generate order for any sendouts and submit with specimen", "focus": {"reference": "ServiceRequest/lipid", "display": "Lipid Panel Request"}, "for": {"reference": "Patient/example", "display": "Peter James Chalmers"}, "encounter": {"reference": "Encounter/example", "display": "Example In-Patient Encounter"}, "executionPeriod": {"start": "2016-10-31T08:25:05+10:00"}, "authoredOn": "2016-10-31T08:25:05+10:00", "lastModified": "2016-10-31T16:45:05+10:00", "requester": {"reference": "Practitioner/example", "display": "Dr Adam Careful"}, "performerType": [{"coding": [{"system": "http://terminology.hl7.org/CodeSystem/task-performer-type", "code": "performer", "display": "Performer"}], "text": "Performer"}], "owner": {"reference": "Organization/1832473e-2fe0-452d-abe9-3cdb9879522f", "display": "Clinical Laboratory @ Acme Hospital"}, "reasonCode": {"text": "The Task.reason should only be included if there is no Task.focus or if it differs from the reason indicated on the focus"}, "note": [{"text": "This is an example to demonstrate using task for actioning a servicerequest and to illustrate how to populate many of the task elements - this is the parent task that will be broken into subtask to grab the specimen and a sendout lab test "}], "restriction": {"repetitions": 1, "period": {"end": "2016-11-02T09:45:05+10:00"}}, "output": [{"type": {"text": "collected specimen"}, "valueReference": {"reference": "Specimen/101"}}], "meta": {"tag": [{"system": "http://terminology.hl7.org/CodeSystem/v3-ActReason", "code": "HTEST", "display": "test health data"}]}}}, "task-example6.json": {"value": {"resourceType": "Task", "id": "example6", "text": {"status": "generated", "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><p><b>Generated Narrative with Details</b></p><p><b>id</b>: example6</p><p><b>identifier</b>: 20170201-001 (OFFICIAL)</p><p><b>basedOn</b>: General Wellness Careplan</p><p><b>groupIdentifier</b>: G20170201-001 (OFFICIAL)</p><p><b>status</b>: completed</p><p><b>businessStatus</b>: test completed and posted <span>(Details )</span></p><p><b>intent</b>: order</p><p><b>priority</b>: routine</p><p><b>code</b>: Lipid Panel <span>(Details )</span></p><p><b>description</b>: Create order for getting specimen, Set up inhouse testing,  generate order for any sendouts and submit with specimen</p><p><b>focus</b>: <a>Lipid Panel Request</a></p><p><b>for</b>: <a>Peter James Chalmers</a></p><p><b>encounter</b>: <a>Example In-Patient Encounter</a></p><p><b>executionPeriod</b>: 31/10/2016 8:25:05 AM --&gt; 31/10/2016 6:45:05 PM</p><p><b>authoredOn</b>: 31/10/2016 8:25:05 AM</p><p><b>lastModified</b>: 31/10/2016 6:45:05 PM</p><p><b>requester</b>: <a>Dr Adam Careful</a></p><p><b>performerType</b>: Performer <span>(Details : {http://terminology.hl7.org/CodeSystem/task-performer-type code 'performer' = 'performer', given as 'Performer'})</span></p><p><b>owner</b>: <a>Clinical Laboratory @ Acme Hospital</a></p><p><b>reasonCode</b>: The Task.reason should only be included if there is no Task.focus or if it differs from the reason indicated on the focus <span>(Details )</span></p><p><b>note</b>: This is an example to demonstrate using task for actioning a servicerequest and to illustrate how to populate many of the task elements - this is the parent task that will be broken into subtask to grab the specimen and a sendout lab test </p><h3>Restrictions</h3><table><tr><td>-</td><td><b>Repetitions</b></td><td><b>Period</b></td></tr><tr><td>*</td><td>1</td><td>?? --&gt; 02/11/2016 9:45:05 AM</td></tr></table><blockquote><p><b>output</b></p><p><b>type</b>: DiagnosticReport generated <span>(Details )</span></p><p><b>value</b>: <a>DiagnosticReport/lipids</a></p></blockquote><blockquote><p><b>output</b></p><p><b>type</b>: collected specimen <span>(Details )</span></p><p><b>value</b>: <a>Specimen/101</a></p></blockquote></div>"}, "identifier": [{"use": "official", "system": "http:/goodhealth.org/identifiers", "value": "20170201-001"}], "basedOn": [{"display": "General Wellness Careplan"}], "groupIdentifier": {"use": "official", "system": "http:/goodhealth.org/accession/identifiers", "value": "G20170201-001"}, "status": "completed", "businessStatus": {"text": "test completed and posted"}, "intent": "order", "priority": "routine", "code": {"text": "Lipid Panel"}, "description": "Create order for getting specimen, Set up inhouse testing,  generate order for any sendouts and submit with specimen", "focus": {"reference": "ServiceRequest/lipid", "display": "Lipid Panel Request"}, "for": {"reference": "Patient/example", "display": "Peter James Chalmers"}, "encounter": {"reference": "Encounter/example", "display": "Example In-Patient Encounter"}, "executionPeriod": {"start": "2016-10-31T08:25:05+10:00", "end": "2016-10-31T18:45:05+10:00"}, "authoredOn": "2016-10-31T08:25:05+10:00", "lastModified": "2016-10-31T18:45:05+10:00", "requester": {"reference": "Practitioner/example", "display": "Dr Adam Careful"}, "performerType": [{"coding": [{"system": "http://terminology.hl7.org/CodeSystem/task-performer-type", "code": "performer", "display": "Performer"}], "text": "Performer"}], "owner": {"reference": "Organization/1832473e-2fe0-452d-abe9-3cdb9879522f", "display": "Clinical Laboratory @ Acme Hospital"}, "reasonCode": {"text": "The Task.reason should only be included if there is no Task.focus or if it differs from the reason indicated on the focus"}, "note": [{"text": "This is an example to demonstrate using task for actioning a servicerequest and to illustrate how to populate many of the task elements - this is the parent task that will be broken into subtask to grab the specimen and a sendout lab test "}], "restriction": {"repetitions": 1, "period": {"end": "2016-11-02T09:45:05+10:00"}}, "output": [{"type": {"text": "DiagnosticReport generated"}, "valueReference": {"reference": "DiagnosticReport/lipids"}}, {"type": {"text": "collected specimen"}, "valueReference": {"reference": "Specimen/101"}}], "meta": {"tag": [{"system": "http://terminology.hl7.org/CodeSystem/v3-ActReason", "code": "HTEST", "display": "test health data"}]}}}}}}}, "security": [{"ApiKeyAuth": ["user/*.write", "user/*.*"]}]}, "get": {"tags": ["Task"], "parameters": [{"name": "authored-on", "in": "query", "schema": {"type": "string", "format": "date"}, "description": "Search by creation date"}, {"name": "based-on", "in": "query", "schema": {"type": "string"}, "description": "Search by requests this task is based on"}, {"name": "business-status", "in": "query", "schema": {"type": "string"}, "description": "Search by business status"}, {"name": "code", "in": "query", "schema": {"type": "string"}, "description": "Search by task code"}, {"name": "encounter", "in": "query", "schema": {"type": "string"}, "description": "Search by encounter"}, {"name": "focus", "in": "query", "schema": {"type": "string"}, "description": "Search by task focus"}, {"name": "group-identifier", "in": "query", "schema": {"type": "string"}, "description": "Search by group identifier"}, {"name": "identifier", "in": "query", "schema": {"type": "string"}, "description": "Search for a task instance by its business identifier"}, {"name": "intent", "in": "query", "schema": {"type": "string"}, "description": "Search by task intent"}, {"name": "modified", "in": "query", "schema": {"type": "string", "format": "date"}, "description": "Search by last modification date"}, {"name": "owner", "in": "query", "schema": {"type": "string"}, "description": "Search by task owner"}, {"name": "part-of", "in": "query", "schema": {"type": "string"}, "description": "Search by task this task is part of"}, {"name": "patient", "in": "query", "schema": {"type": "string"}, "description": "Search by patient"}, {"name": "performer", "in": "query", "schema": {"type": "string"}, "description": "Search by recommended type of performer (e.g., Requester, Performer, Scheduler)."}, {"name": "period", "in": "query", "schema": {"type": "string", "format": "date"}, "description": "Search by period Task is/was underway"}, {"name": "priority", "in": "query", "schema": {"type": "string"}, "description": "Search by task priority"}, {"name": "requester", "in": "query", "schema": {"type": "string"}, "description": "Search by task requester"}, {"name": "status", "in": "query", "schema": {"type": "string"}, "description": "Search by task status"}, {"name": "subject", "in": "query", "schema": {"type": "string"}, "description": "Search by subject"}], "responses": {"200": {"description": "Success", "content": {"application/fhir+json": {"schema": {"$ref": "#/components/schemas/Task"}}}}, "400": {"description": "Invalid"}, "404": {"description": "Not-Found"}, "406": {"description": "Not-Supported"}, "503": {"description": "Operation"}, "401": {"description": "Unauthorized"}, "403": {"description": "Forbidden"}, "415": {"description": "Unsupported-Type"}, "500": {"description": "Internal-Error"}, "502": {"description": "Bad-Gateway"}}, "security": [{"ApiKeyAuth": ["user/*.write", "user/*.*"]}]}}, "/Task/{id}/_history/{vid}": {"get": {"tags": ["Task"], "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "vid", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Success", "content": {"application/fhir+json": {"schema": {"$ref": "#/components/schemas/Task"}}}}, "400": {"description": "Invalid"}, "404": {"description": "Not-Found"}, "406": {"description": "Not-Supported"}, "503": {"description": "Operation"}, "401": {"description": "Unauthorized"}, "403": {"description": "Forbidden"}, "415": {"description": "Unsupported-Type"}, "500": {"description": "Internal-Error"}, "502": {"description": "Bad-Gateway"}}, "security": [{"ApiKeyAuth": ["user/*.write", "user/*.*"]}]}}}, "info": {"description": "A task to be performed", "title": "FHIR R4 Task Resource", "version": "unspecified"}, "tags": [{"name": "Task"}], "openapi": "3.0.1", "servers": [{"url": "http://localhost:52774/csp/healthshare/fhirtest/fhir/r4"}], "components": {"schemas": {"Task": {"description": "A task to be performed", "type": "object", "properties": {"authoredOn": {"type": "string", "description": "The date and time this task was created."}, "basedOn": {"type": "array", "items": {"$ref": "#/components/schemas/Reference"}, "description": "Request fulfilled by this task"}, "businessStatus": {"type": "object", "allOf": [{"$ref": "#/components/schemas/CodeableConcept"}], "description": "Contains business-specific nuances of the business state."}, "code": {"type": "object", "allOf": [{"$ref": "#/components/schemas/CodeableConcept"}], "description": "A name or code (or both) briefly describing what the task involves."}, "contained": {"type": "array", "items": {"$ref": "#/components/schemas/Resource"}, "description": "Contained, inline Resources"}, "description": {"type": "string", "description": "A free-text description of what is to be performed."}, "encounter": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Reference"}], "description": "Healthcare event during which this task originated"}, "executionPeriod": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Period"}], "description": "Start and end time of execution"}, "focus": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Reference"}], "description": "The request being actioned or the resource being manipulated by this task."}, "for": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Reference"}], "description": "Beneficiary of the Task"}, "groupIdentifier": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Identifier"}], "description": "Requisition or grouper id"}, "id": {"type": "string", "description": "Logical id of this artifact"}, "identifier": {"type": "array", "items": {"$ref": "#/components/schemas/Identifier"}, "description": "The business identifier for this task."}, "implicitRules": {"type": "string", "description": "A set of rules under which this content was created"}, "input": {"type": "array", "items": {"$ref": "#/components/schemas/Task.input"}, "description": ""}, "instantiatesCanonical": {"type": "string", "description": "Formal definition of task"}, "instantiatesUri": {"type": "string", "description": "Formal definition of task"}, "insurance": {"type": "array", "items": {"$ref": "#/components/schemas/Reference"}, "description": "Associated insurance coverage"}, "intent": {"type": "string", "description": "unknown | proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option"}, "language": {"type": "string", "description": "The base language in which the resource is written."}, "lastModified": {"type": "string", "description": "The date and time of last modification to this task."}, "location": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Reference"}], "description": "Principal physical location where the this task is performed."}, "meta": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Meta"}], "description": "Metadata about the resource"}, "note": {"type": "array", "items": {"$ref": "#/components/schemas/Annotation"}, "description": "Free-text information captured about the task as it progresses."}, "output": {"type": "array", "items": {"$ref": "#/components/schemas/Task.output"}, "description": ""}, "owner": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Reference"}], "description": "Individual organization or Device currently responsible for task execution."}, "partOf": {"type": "array", "items": {"$ref": "#/components/schemas/Reference"}, "description": "Task that this particular task is part of."}, "performerType": {"type": "array", "items": {"$ref": "#/components/schemas/CodeableConcept"}, "description": "The kind of participant that should perform the task."}, "priority": {"type": "string", "description": "Indicates how quickly the Task should be addressed with respect to other requests."}, "reasonCode": {"type": "object", "allOf": [{"$ref": "#/components/schemas/CodeableConcept"}], "description": "A description or code indicating why this task needs to be performed."}, "reasonReference": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Reference"}], "description": "A resource reference indicating why this task needs to be performed."}, "relevantHistory": {"type": "array", "items": {"$ref": "#/components/schemas/Reference"}, "description": "Key events in history of the Task"}, "requester": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Reference"}], "description": "The creator of the task."}, "restriction": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Task.restriction"}], "description": ""}, "status": {"type": "string", "description": "The current status of the task."}, "statusReason": {"type": "object", "allOf": [{"$ref": "#/components/schemas/CodeableConcept"}], "description": "An explanation as to why this task is held, failed, was refused, etc."}, "text": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Narrative"}], "description": "Text summary of the resource, for human interpretation"}}, "required": ["id", "intent", "status"]}, "Task.input": {"description": "", "type": "object", "properties": {"id": {"type": "string", "description": "Unique id for inter-element referencing"}, "type": {"type": "object", "allOf": [{"$ref": "#/components/schemas/CodeableConcept"}], "description": "Label for the input"}, "value[x]": {"type": "string", "description": "Content to use in performing the task"}, "valueAddress": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Address"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueAge": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Age"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueAnnotation": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Annotation"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueAttachment": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Attachment"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueBase64Binary": {"type": "string", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueBoolean": {"type": "boolean", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueCanonical": {"type": "string", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueCode": {"type": "string", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueCodeableConcept": {"type": "object", "allOf": [{"$ref": "#/components/schemas/CodeableConcept"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueCoding": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Coding"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueContactDetail": {"type": "object", "allOf": [{"$ref": "#/components/schemas/ContactDetail"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueContactPoint": {"type": "object", "allOf": [{"$ref": "#/components/schemas/ContactPoint"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueContributor": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Contributor"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueCount": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Count"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueDataRequirement": {"type": "object", "allOf": [{"$ref": "#/components/schemas/DataRequirement"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueDate": {"type": "string", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueDateTime": {"type": "string", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueDecimal": {"type": "number", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueDistance": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Distance"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueDosage": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Dosage"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueDuration": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Duration"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueExpression": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Expression"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueHumanName": {"type": "object", "allOf": [{"$ref": "#/components/schemas/HumanName"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueId": {"type": "string", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueIdentifier": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Identifier"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueInstant": {"type": "string", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueInteger": {"type": "number", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueMarkdown": {"type": "string", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueMeta": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Meta"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueMoney": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Money"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueOid": {"type": "string", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueParameterDefinition": {"type": "object", "allOf": [{"$ref": "#/components/schemas/ParameterDefinition"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valuePeriod": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Period"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valuePositiveInt": {"type": "number", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueQuantity": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Quantity"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueRange": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Range"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueRatio": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Ratio"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueReference": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Reference"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueRelatedArtifact": {"type": "object", "allOf": [{"$ref": "#/components/schemas/RelatedArtifact"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueSampledData": {"type": "object", "allOf": [{"$ref": "#/components/schemas/SampledData"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueSignature": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Signature"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueString": {"type": "string", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueTime": {"type": "string", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueTiming": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Timing"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueTriggerDefinition": {"type": "object", "allOf": [{"$ref": "#/components/schemas/TriggerDefinition"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueUnsignedInt": {"type": "number", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueUri": {"type": "string", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueUrl": {"type": "string", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueUsageContext": {"type": "object", "allOf": [{"$ref": "#/components/schemas/UsageContext"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueUuid": {"type": "string", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}}, "required": ["id", "type", "value"]}, "Task.output": {"description": "", "type": "object", "properties": {"id": {"type": "string", "description": "Unique id for inter-element referencing"}, "type": {"type": "object", "allOf": [{"$ref": "#/components/schemas/CodeableConcept"}], "description": "Label for output"}, "value[x]": {"type": "string", "description": "Result of output"}, "valueAddress": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Address"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueAge": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Age"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueAnnotation": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Annotation"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueAttachment": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Attachment"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueBase64Binary": {"type": "string", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueBoolean": {"type": "boolean", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueCanonical": {"type": "string", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueCode": {"type": "string", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueCodeableConcept": {"type": "object", "allOf": [{"$ref": "#/components/schemas/CodeableConcept"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueCoding": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Coding"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueContactDetail": {"type": "object", "allOf": [{"$ref": "#/components/schemas/ContactDetail"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueContactPoint": {"type": "object", "allOf": [{"$ref": "#/components/schemas/ContactPoint"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueContributor": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Contributor"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueCount": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Count"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueDataRequirement": {"type": "object", "allOf": [{"$ref": "#/components/schemas/DataRequirement"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueDate": {"type": "string", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueDateTime": {"type": "string", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueDecimal": {"type": "number", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueDistance": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Distance"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueDosage": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Dosage"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueDuration": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Duration"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueExpression": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Expression"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueHumanName": {"type": "object", "allOf": [{"$ref": "#/components/schemas/HumanName"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueId": {"type": "string", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueIdentifier": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Identifier"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueInstant": {"type": "string", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueInteger": {"type": "number", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueMarkdown": {"type": "string", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueMeta": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Meta"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueMoney": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Money"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueOid": {"type": "string", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueParameterDefinition": {"type": "object", "allOf": [{"$ref": "#/components/schemas/ParameterDefinition"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valuePeriod": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Period"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valuePositiveInt": {"type": "number", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueQuantity": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Quantity"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueRange": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Range"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueRatio": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Ratio"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueReference": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Reference"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueRelatedArtifact": {"type": "object", "allOf": [{"$ref": "#/components/schemas/RelatedArtifact"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueSampledData": {"type": "object", "allOf": [{"$ref": "#/components/schemas/SampledData"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueSignature": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Signature"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueString": {"type": "string", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueTime": {"type": "string", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueTiming": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Timing"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueTriggerDefinition": {"type": "object", "allOf": [{"$ref": "#/components/schemas/TriggerDefinition"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueUnsignedInt": {"type": "number", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueUri": {"type": "string", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueUrl": {"type": "string", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueUsageContext": {"type": "object", "allOf": [{"$ref": "#/components/schemas/UsageContext"}], "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}, "valueUuid": {"type": "string", "description": "UNABLE TO FIND RESOURCE/ELEMENT NAME"}}, "required": ["id", "type", "value"]}, "Task.restriction": {"description": "", "type": "object", "properties": {"id": {"type": "string", "description": "Unique id for inter-element referencing"}, "period": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Period"}], "description": "When fulfillment sought"}, "recipient": {"type": "array", "items": {"$ref": "#/components/schemas/Reference"}, "description": "For whom is fulfillment sought?"}, "repetitions": {"type": "number", "description": "How many times to repeat"}}, "required": ["id"]}, "Reference": {"description": "", "type": "object", "properties": {"display": {"type": "string", "description": "Plain text narrative that identifies the resource in addition to the resource reference."}, "id": {"type": "string", "description": ""}, "identifier": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Identifier"}], "description": "Logical reference, when literal reference is not known"}, "reference": {"type": "string", "description": "Literal reference, Relative, internal or absolute URL"}, "type": {"type": "string", "description": "Type the reference refers to (e.g. \"Patient\")"}}, "required": ["id"]}, "CodeableConcept": {"description": "", "type": "object", "properties": {"coding": {"type": "array", "items": {"$ref": "#/components/schemas/Coding"}, "description": "A reference to a code defined by a terminology system."}, "id": {"type": "string", "description": ""}, "text": {"type": "string", "description": "Plain text representation of the concept"}}, "required": ["id"]}, "Resource": {"description": "Base Resource", "type": "object", "properties": {"id": {"type": "string", "description": "Logical id of this artifact"}, "implicitRules": {"type": "string", "description": "A set of rules under which this content was created"}, "language": {"type": "string", "description": "The base language in which the resource is written."}, "meta": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Meta"}], "description": "Metadata about the resource"}}, "required": ["id"]}, "Period": {"description": "", "type": "object", "properties": {"end": {"type": "string", "description": "End time with inclusive boundary, if not ongoing"}, "id": {"type": "string", "description": ""}, "start": {"type": "string", "description": "The start of the period. The boundary is inclusive."}}, "required": ["id"]}, "Extension": {"description": "", "type": "object", "properties": {"id": {"type": "string", "description": ""}, "url": {"type": "string", "description": "Source of the definition for the extension code - a logical name or a URL."}, "value[x]": {"type": "string", "description": "Value of extension"}, "valueAddress": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Address"}], "description": ""}, "valueAge": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Age"}], "description": ""}, "valueAnnotation": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Annotation"}], "description": ""}, "valueAttachment": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Attachment"}], "description": ""}, "valueBase64Binary": {"type": "string", "description": ""}, "valueBoolean": {"type": "boolean", "description": ""}, "valueCanonical": {"type": "string", "description": ""}, "valueCode": {"type": "string", "description": ""}, "valueCodeableConcept": {"type": "object", "allOf": [{"$ref": "#/components/schemas/CodeableConcept"}], "description": ""}, "valueCoding": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Coding"}], "description": ""}, "valueContactDetail": {"type": "object", "allOf": [{"$ref": "#/components/schemas/ContactDetail"}], "description": ""}, "valueContactPoint": {"type": "object", "allOf": [{"$ref": "#/components/schemas/ContactPoint"}], "description": ""}, "valueContributor": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Contributor"}], "description": ""}, "valueCount": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Count"}], "description": ""}, "valueDataRequirement": {"type": "object", "allOf": [{"$ref": "#/components/schemas/DataRequirement"}], "description": ""}, "valueDate": {"type": "string", "description": ""}, "valueDateTime": {"type": "string", "description": ""}, "valueDecimal": {"type": "number", "description": ""}, "valueDistance": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Distance"}], "description": ""}, "valueDosage": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Dosage"}], "description": ""}, "valueDuration": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Duration"}], "description": ""}, "valueExpression": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Expression"}], "description": ""}, "valueHumanName": {"type": "object", "allOf": [{"$ref": "#/components/schemas/HumanName"}], "description": ""}, "valueId": {"type": "string", "description": ""}, "valueIdentifier": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Identifier"}], "description": ""}, "valueInstant": {"type": "string", "description": ""}, "valueInteger": {"type": "number", "description": ""}, "valueMarkdown": {"type": "string", "description": ""}, "valueMeta": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Meta"}], "description": ""}, "valueMoney": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Money"}], "description": ""}, "valueOid": {"type": "string", "description": ""}, "valueParameterDefinition": {"type": "object", "allOf": [{"$ref": "#/components/schemas/ParameterDefinition"}], "description": ""}, "valuePeriod": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Period"}], "description": ""}, "valuePositiveInt": {"type": "number", "description": ""}, "valueQuantity": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Quantity"}], "description": ""}, "valueRange": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Range"}], "description": ""}, "valueRatio": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Ratio"}], "description": ""}, "valueReference": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Reference"}], "description": ""}, "valueRelatedArtifact": {"type": "object", "allOf": [{"$ref": "#/components/schemas/RelatedArtifact"}], "description": ""}, "valueSampledData": {"type": "object", "allOf": [{"$ref": "#/components/schemas/SampledData"}], "description": ""}, "valueSignature": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Signature"}], "description": ""}, "valueString": {"type": "string", "description": ""}, "valueTime": {"type": "string", "description": ""}, "valueTiming": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Timing"}], "description": ""}, "valueTriggerDefinition": {"type": "object", "allOf": [{"$ref": "#/components/schemas/TriggerDefinition"}], "description": ""}, "valueUnsignedInt": {"type": "number", "description": ""}, "valueUri": {"type": "string", "description": ""}, "valueUrl": {"type": "string", "description": ""}, "valueUsageContext": {"type": "object", "allOf": [{"$ref": "#/components/schemas/UsageContext"}], "description": ""}, "valueUuid": {"type": "string", "description": ""}}, "required": ["id", "url"]}, "Identifier": {"description": "", "type": "object", "properties": {"assigner": {"type": "string", "description": "Organization that issued/manages the identifier."}, "id": {"type": "string", "description": ""}, "period": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Period"}], "description": "Time period during which identifier is/was valid for use."}, "system": {"type": "string", "description": "The namespace for the identifier value"}, "type": {"type": "object", "allOf": [{"$ref": "#/components/schemas/CodeableConcept"}], "description": "Description of identifier"}, "use": {"type": "string", "description": "The purpose of this identifier."}, "value": {"type": "string", "description": "The value that is unique"}}, "required": ["id"]}, "Meta": {"description": "", "type": "object", "properties": {"id": {"type": "string", "description": ""}, "lastUpdated": {"type": "string", "description": "When the resource last changed - e.g. when the version changed."}, "profile": {"type": "string", "description": "Profiles this resource claims to conform to"}, "security": {"type": "array", "items": {"$ref": "#/components/schemas/Coding"}, "description": "Security Labels applied to this resource"}, "source": {"type": "string", "description": "Identifies where the resource comes from"}, "tag": {"type": "array", "items": {"$ref": "#/components/schemas/Coding"}, "description": "Tags applied to this resource"}, "versionId": {"type": "string", "description": "Version specific identifier"}}, "required": ["id"]}, "Annotation": {"description": "", "type": "object", "properties": {"author[x]": {"type": "string", "description": "The individual responsible for making the annotation."}, "authorReference": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Reference"}], "description": ""}, "authorString": {"type": "string", "description": ""}, "id": {"type": "string", "description": ""}, "text": {"type": "string", "description": "The text of the annotation in markdown format."}, "time": {"type": "string", "description": "Indicates when this particular annotation was made."}}, "required": ["id", "text"]}, "Narrative": {"description": "", "type": "object", "properties": {"div": {"description": "The actual narrative content, a stripped down version of XHTML."}, "id": {"type": "string", "description": ""}, "status": {"type": "string", "description": "generated | extensions | additional | empty"}}, "required": ["id", "div", "status"]}, "Coding": {"description": "", "type": "object", "properties": {"code": {"type": "string", "description": "Symbol in syntax defined by the system"}, "display": {"type": "string", "description": "A representation of the meaning of the code in the system, following the rules of the system."}, "id": {"type": "string", "description": ""}, "system": {"type": "string", "description": "The identification of the code system that defines the meaning of the symbol in the code."}, "userSelected": {"type": "boolean", "description": "If this coding was chosen directly by the user"}, "version": {"type": "string", "description": "Version of the system - if relevant"}}, "required": ["id"]}, "Address": {"description": "", "type": "object", "properties": {"city": {"type": "string", "description": "The name of the city, town, suburb, village or other community or delivery center."}, "country": {"type": "string", "description": "Country - a nation as commonly understood or generally accepted."}, "district": {"type": "string", "description": "The name of the administrative area (county)."}, "id": {"type": "string", "description": ""}, "line": {"type": "string", "description": "Street name, number, direction & P.O. Box etc."}, "period": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Period"}], "description": "Time period when address was/is in use."}, "postalCode": {"type": "string", "description": "A postal code designating a region defined by the postal service."}, "state": {"type": "string", "description": "Sub-unit of country (abbreviations ok)"}, "text": {"type": "string", "description": "Text representation of the address"}, "type": {"type": "string", "description": "postal | physical | both"}, "use": {"type": "string", "description": "The purpose of this address."}}, "required": ["id"]}, "Age": {"description": "", "type": "object", "properties": {"code": {"type": "string", "description": ""}, "comparator": {"type": "string", "description": ""}, "id": {"type": "string", "description": ""}, "system": {"type": "string", "description": ""}, "unit": {"type": "string", "description": ""}, "value": {"type": "number", "description": ""}}, "required": ["id"]}, "Attachment": {"description": "", "type": "object", "properties": {"contentType": {"type": "string", "description": "Mime type of the content, with charset etc."}, "creation": {"type": "string", "description": "The date that the attachment was first created."}, "data": {"type": "string", "description": "The actual data of the attachment - a sequence of bytes, base64 encoded."}, "hash": {"type": "string", "description": "The calculated hash of the data using SHA-1. Represented using base64."}, "id": {"type": "string", "description": ""}, "language": {"type": "string", "description": "The human language of the content. The value can be any valid value according to BCP 47."}, "size": {"type": "number", "description": "The number of bytes of data that make up this attachment (before base64 encoding, if that is done)."}, "title": {"type": "string", "description": "A label or set of text to display in place of the data."}, "url": {"type": "string", "description": "A location where the data can be accessed."}}, "required": ["id"]}, "ContactDetail": {"description": "", "type": "object", "properties": {"id": {"type": "string", "description": ""}, "name": {"type": "string", "description": "The name of an individual to contact."}, "telecom": {"type": "array", "items": {"$ref": "#/components/schemas/ContactPoint"}, "description": "The contact details for the individual (if a name was provided) or the organization."}}, "required": ["id"]}, "ContactPoint": {"description": "", "type": "object", "properties": {"id": {"type": "string", "description": ""}, "period": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Period"}], "description": "Time period when the contact point was/is in use."}, "rank": {"type": "number", "description": "Specify preferred order of use (1 = highest)"}, "system": {"type": "string", "description": "phone | fax | email | pager | url | sms | other"}, "use": {"type": "string", "description": "Identifies the purpose for the contact point."}, "value": {"type": "string", "description": "The actual contact point details"}}, "required": ["id"]}, "Contributor": {"description": "", "type": "object", "properties": {"contact": {"type": "array", "items": {"$ref": "#/components/schemas/ContactDetail"}, "description": "Contact details to assist a user in finding and communicating with the contributor."}, "id": {"type": "string", "description": ""}, "name": {"type": "string", "description": "The name of the individual or organization responsible for the contribution."}, "type": {"type": "string", "description": "The type of contributor."}}, "required": ["id", "name", "type"]}, "Count": {"description": "", "type": "object", "properties": {"code": {"type": "string", "description": ""}, "comparator": {"type": "string", "description": ""}, "id": {"type": "string", "description": ""}, "system": {"type": "string", "description": ""}, "unit": {"type": "string", "description": ""}, "value": {"type": "number", "description": ""}}, "required": ["id"]}, "DataRequirement": {"description": "", "type": "object", "properties": {"codeFilter": {"type": "array", "items": {"$ref": "#/components/schemas/DataRequirement.codeFilter"}, "description": ""}, "dateFilter": {"type": "array", "items": {"$ref": "#/components/schemas/DataRequirement.dateFilter"}, "description": ""}, "id": {"type": "string", "description": ""}, "limit": {"type": "number", "description": "Specifies a maximum number of results that are required (uses the _count search parameter)."}, "mustSupport": {"type": "string", "description": "Indicates specific structure elements that are referenced by the knowledge module"}, "profile": {"type": "string", "description": "The profile of the required data, specified as the uri of the profile definition."}, "sort": {"type": "array", "items": {"$ref": "#/components/schemas/DataRequirement.sort"}, "description": ""}, "subject[x]": {"type": "string", "description": "E.g. Patient, Practitioner, RelatedPerson, Organization, Location, Device"}, "subjectCodeableConcept": {"type": "object", "allOf": [{"$ref": "#/components/schemas/CodeableConcept"}], "description": ""}, "subjectReference": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Reference"}], "description": ""}, "type": {"type": "string", "description": "The type of the required data"}}, "required": ["id", "type"]}, "Distance": {"description": "", "type": "object", "properties": {"code": {"type": "string", "description": ""}, "comparator": {"type": "string", "description": ""}, "id": {"type": "string", "description": ""}, "system": {"type": "string", "description": ""}, "unit": {"type": "string", "description": ""}, "value": {"type": "number", "description": ""}}, "required": ["id"]}, "Dosage": {"description": "", "type": "object", "properties": {"additionalInstruction": {"type": "array", "items": {"$ref": "#/components/schemas/CodeableConcept"}, "description": "Supplemental instruction or warnings to the patient - e.g. \"with meals\", \"may cause drowsiness\""}, "asNeeded[x]": {"type": "string", "description": "Take \"as needed\" (for x)"}, "asNeededBoolean": {"type": "boolean", "description": ""}, "asNeededCodeableConcept": {"type": "object", "allOf": [{"$ref": "#/components/schemas/CodeableConcept"}], "description": ""}, "doseAndRate": {"type": "array", "items": {"$ref": "#/components/schemas/Dosage.doseAndRate"}, "description": ""}, "id": {"type": "string", "description": ""}, "maxDosePerAdministration": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Quantity"}], "description": "Upper limit on medication per administration."}, "maxDosePerLifetime": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Quantity"}], "description": "Upper limit on medication per lifetime of the patient."}, "maxDosePerPeriod": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Ratio"}], "description": "Upper limit on medication per unit of time."}, "method": {"type": "object", "allOf": [{"$ref": "#/components/schemas/CodeableConcept"}], "description": "Technique for administering medication."}, "patientInstruction": {"type": "string", "description": "Instructions in terms that are understood by the patient or consumer."}, "route": {"type": "object", "allOf": [{"$ref": "#/components/schemas/CodeableConcept"}], "description": "How drug should enter body."}, "sequence": {"type": "number", "description": "Indicates the order in which the dosage instructions should be applied or interpreted."}, "site": {"type": "object", "allOf": [{"$ref": "#/components/schemas/CodeableConcept"}], "description": "Body site to administer to."}, "text": {"type": "string", "description": "Free text dosage instructions e.g. SIG."}, "timing": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Timing"}], "description": "When medication should be administered."}}, "required": ["id"]}, "Duration": {"description": "", "type": "object", "properties": {"code": {"type": "string", "description": ""}, "comparator": {"type": "string", "description": ""}, "id": {"type": "string", "description": ""}, "system": {"type": "string", "description": ""}, "unit": {"type": "string", "description": ""}, "value": {"type": "number", "description": ""}}, "required": ["id"]}, "Expression": {"description": "", "type": "object", "properties": {"description": {"type": "string", "description": "Natural language description of the condition"}, "expression": {"type": "string", "description": "An expression in the specified language that returns a value."}, "id": {"type": "string", "description": ""}, "language": {"type": "string", "description": "The media type of the language for the expression."}, "name": {"type": "string", "description": "Short name assigned to expression for reuse"}, "reference": {"type": "string", "description": "A URI that defines where the expression is found."}}, "required": ["id", "language"]}, "HumanName": {"description": "", "type": "object", "properties": {"family": {"type": "string", "description": "Family name (often called 'Surname')"}, "given": {"type": "string", "description": "Given name."}, "id": {"type": "string", "description": ""}, "period": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Period"}], "description": "Indicates the period of time when this name was valid for the named person."}, "prefix": {"type": "string", "description": "Parts that come before the name"}, "suffix": {"type": "string", "description": "Parts that come after the name"}, "text": {"type": "string", "description": "Text representation of the full name"}, "use": {"type": "string", "description": "Identifies the purpose for this name."}}, "required": ["id"]}, "Money": {"description": "", "type": "object", "properties": {"currency": {"type": "string", "description": "ISO 4217 Currency Code."}, "id": {"type": "string", "description": ""}, "value": {"type": "number", "description": "Numerical value (with implicit precision)."}}, "required": ["id"]}, "ParameterDefinition": {"description": "", "type": "object", "properties": {"documentation": {"type": "string", "description": "A brief discussion of what the parameter is for and how it is used by the module."}, "id": {"type": "string", "description": ""}, "max": {"type": "string", "description": "The maximum number of times this element is permitted to appear in the request or response."}, "min": {"type": "number", "description": "The minimum number of times this parameter SHALL appear in the request or response."}, "name": {"type": "string", "description": "Name used to access the parameter value"}, "profile": {"type": "string", "description": "What profile the value is expected to be"}, "type": {"type": "string", "description": "The type of the parameter."}, "use": {"type": "string", "description": "Whether the parameter is input or output for the module."}}, "required": ["id", "type", "use"]}, "Quantity": {"description": "", "type": "object", "properties": {"code": {"type": "string", "description": "A computer processable form of the unit in some unit representation system."}, "comparator": {"type": "string", "description": "< | <= | >= | > - how to understand the value"}, "id": {"type": "string", "description": "Unique id for inter-element referencing"}, "system": {"type": "string", "description": "The identification of the system that provides the coded form of the unit."}, "unit": {"type": "string", "description": "A human-readable form of the unit."}, "value": {"type": "number", "description": "Numerical value (with implicit precision)"}}, "required": ["id"]}, "Range": {"description": "", "type": "object", "properties": {"high": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Quantity"}], "description": "The high limit. The boundary is inclusive."}, "id": {"type": "string", "description": ""}, "low": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Quantity"}], "description": "The low limit. The boundary is inclusive."}}, "required": ["id"]}, "Ratio": {"description": "", "type": "object", "properties": {"denominator": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Quantity"}], "description": "The value of the denominator."}, "id": {"type": "string", "description": ""}, "numerator": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Quantity"}], "description": "The value of the numerator."}}, "required": ["id"]}, "RelatedArtifact": {"description": "", "type": "object", "properties": {"citation": {"type": "string", "description": "Bibliographic citation for the artifact"}, "display": {"type": "string", "description": "Brief description of the related artifact"}, "document": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Attachment"}], "description": "What document is being referenced"}, "id": {"type": "string", "description": ""}, "label": {"type": "string", "description": "Short label"}, "resource": {"type": "string", "description": "The related resource, such as a library, value set, profile, or other knowledge resource."}, "type": {"type": "string", "description": "The type of relationship to the related artifact."}, "url": {"type": "string", "description": "A url for the artifact that can be followed to access the actual content."}}, "required": ["id", "type"]}, "SampledData": {"description": "", "type": "object", "properties": {"data": {"type": "string", "description": "Decimal values with spaces, or \"E\" | \"U\" | \"L\""}, "dimensions": {"type": "number", "description": "Number of sample points at each time point"}, "factor": {"type": "number", "description": "A correction factor that is applied to the sampled data points before they are added to the origin."}, "id": {"type": "string", "description": ""}, "lowerLimit": {"type": "number", "description": "Lower limit of detection"}, "origin": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Quantity"}], "description": "Zero value and units"}, "period": {"type": "number", "description": "The length of time between sampling times, measured in milliseconds."}, "upperLimit": {"type": "number", "description": "Upper limit of detection"}}, "required": ["id", "dimensions", "origin", "period"]}, "Signature": {"description": "", "type": "object", "properties": {"data": {"type": "string", "description": "The actual signature content (XML DigSig. JWS, picture, etc.)"}, "id": {"type": "string", "description": ""}, "onBehalfOf": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Reference"}], "description": "The party represented"}, "sigFormat": {"type": "string", "description": "The technical format of the signature"}, "targetFormat": {"type": "string", "description": "A mime type that indicates the technical format of the target resources signed by the signature."}, "type": {"type": "array", "items": {"$ref": "#/components/schemas/Coding"}, "description": "Indication of the reason the entity signed the object(s)"}, "when": {"type": "string", "description": "When the digital signature was signed."}, "who": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Reference"}], "description": "Who signed"}}, "required": ["id", "type", "when", "who"]}, "Timing": {"description": "", "type": "object", "properties": {"code": {"type": "object", "allOf": [{"$ref": "#/components/schemas/CodeableConcept"}], "description": "BID | TID | QID | AM | PM | QD | QOD | +"}, "event": {"type": "string", "description": "Identifies specific times when the event occurs."}, "id": {"type": "string", "description": ""}, "repeat": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Timing.repeat"}], "description": ""}}, "required": ["id"]}, "TriggerDefinition": {"description": "", "type": "object", "properties": {"condition": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Expression"}], "description": "Whether the event triggers (boolean expression)"}, "data": {"type": "array", "items": {"$ref": "#/components/schemas/DataRequirement"}, "description": "Triggering data of the event (multiple = 'and')"}, "id": {"type": "string", "description": ""}, "name": {"type": "string", "description": "Name or URI that identifies the event"}, "timing[x]": {"type": "string", "description": "The timing of the event (if this is a periodic trigger)."}, "timingDate": {"type": "string", "description": ""}, "timingDateTime": {"type": "string", "description": ""}, "timingReference": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Reference"}], "description": ""}, "timingTiming": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Timing"}], "description": ""}, "type": {"type": "string", "description": "The type of triggering event."}}, "required": ["id", "type"]}, "UsageContext": {"description": "", "type": "object", "properties": {"code": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Coding"}], "description": "A code that identifies the type of context being specified by this usage context."}, "id": {"type": "string", "description": ""}, "value[x]": {"type": "string", "description": "Value that defines the context"}, "valueCodeableConcept": {"type": "object", "allOf": [{"$ref": "#/components/schemas/CodeableConcept"}], "description": ""}, "valueQuantity": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Quantity"}], "description": ""}, "valueRange": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Range"}], "description": ""}, "valueReference": {"type": "object", "allOf": [{"$ref": "#/components/schemas/Reference"}], "description": ""}}, "required": ["id", "code", "value"]}}, "securitySchemes": {"ApiKeyAuth": {"type": "apiKey", "in": "header", "name": "X-API-Key"}}}, "security": [{"ApiKeyAuth": ["user/*.write", "user/*.*"]}]}